//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ULS_Site.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ToolSvcCostHistReportBySvcTypeDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ToolSvcCostHistReportBySvcTypeDS : global::System.Data.DataSet {
        
        private GetToolSvcCostHistReportBySvcType2DataTable tableGetToolSvcCostHistReportBySvcType2;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ToolSvcCostHistReportBySvcTypeDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ToolSvcCostHistReportBySvcTypeDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetToolSvcCostHistReportBySvcType2"] != null)) {
                    base.Tables.Add(new GetToolSvcCostHistReportBySvcType2DataTable(ds.Tables["GetToolSvcCostHistReportBySvcType2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetToolSvcCostHistReportBySvcType2DataTable GetToolSvcCostHistReportBySvcType2 {
            get {
                return this.tableGetToolSvcCostHistReportBySvcType2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ToolSvcCostHistReportBySvcTypeDS cln = ((ToolSvcCostHistReportBySvcTypeDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetToolSvcCostHistReportBySvcType2"] != null)) {
                    base.Tables.Add(new GetToolSvcCostHistReportBySvcType2DataTable(ds.Tables["GetToolSvcCostHistReportBySvcType2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetToolSvcCostHistReportBySvcType2 = ((GetToolSvcCostHistReportBySvcType2DataTable)(base.Tables["GetToolSvcCostHistReportBySvcType2"]));
            if ((initTable == true)) {
                if ((this.tableGetToolSvcCostHistReportBySvcType2 != null)) {
                    this.tableGetToolSvcCostHistReportBySvcType2.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ToolSvcCostHistReportBySvcTypeDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ToolSvcCostHistReportBySvcTypeDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetToolSvcCostHistReportBySvcType2 = new GetToolSvcCostHistReportBySvcType2DataTable();
            base.Tables.Add(this.tableGetToolSvcCostHistReportBySvcType2);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetToolSvcCostHistReportBySvcType2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ToolSvcCostHistReportBySvcTypeDS ds = new ToolSvcCostHistReportBySvcTypeDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetToolSvcCostHistReportBySvcType2RowChangeEventHandler(object sender, GetToolSvcCostHistReportBySvcType2RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetToolSvcCostHistReportBySvcType2DataTable : global::System.Data.TypedTableBase<GetToolSvcCostHistReportBySvcType2Row> {
            
            private global::System.Data.DataColumn columntool_id;
            
            private global::System.Data.DataColumn columnlabor_cost;
            
            private global::System.Data.DataColumn columnparts_cost;
            
            private global::System.Data.DataColumn columntotal_cost;
            
            private global::System.Data.DataColumn columnservice_dt;
            
            private global::System.Data.DataColumn columnmechanic;
            
            private global::System.Data.DataColumn columntoo_serv_descr;
            
            private global::System.Data.DataColumn columntools_type_descr;
            
            private global::System.Data.DataColumn columntools_descr_descr;
            
            private global::System.Data.DataColumn columnfromDt;
            
            private global::System.Data.DataColumn columntoDt;
            
            private global::System.Data.DataColumn columnregistered_by;
            
            private global::System.Data.DataColumn columnmanaged_by;
            
            private global::System.Data.DataColumn columndiv;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetToolSvcCostHistReportBySvcType2DataTable() {
                this.TableName = "GetToolSvcCostHistReportBySvcType2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetToolSvcCostHistReportBySvcType2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetToolSvcCostHistReportBySvcType2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tool_idColumn {
                get {
                    return this.columntool_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn labor_costColumn {
                get {
                    return this.columnlabor_cost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parts_costColumn {
                get {
                    return this.columnparts_cost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn total_costColumn {
                get {
                    return this.columntotal_cost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_dtColumn {
                get {
                    return this.columnservice_dt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mechanicColumn {
                get {
                    return this.columnmechanic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn too_serv_descrColumn {
                get {
                    return this.columntoo_serv_descr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tools_type_descrColumn {
                get {
                    return this.columntools_type_descr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tools_descr_descrColumn {
                get {
                    return this.columntools_descr_descr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fromDtColumn {
                get {
                    return this.columnfromDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn toDtColumn {
                get {
                    return this.columntoDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn registered_byColumn {
                get {
                    return this.columnregistered_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn managed_byColumn {
                get {
                    return this.columnmanaged_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn divColumn {
                get {
                    return this.columndiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetToolSvcCostHistReportBySvcType2Row this[int index] {
                get {
                    return ((GetToolSvcCostHistReportBySvcType2Row)(this.Rows[index]));
                }
            }
            
            public event GetToolSvcCostHistReportBySvcType2RowChangeEventHandler GetToolSvcCostHistReportBySvcType2RowChanging;
            
            public event GetToolSvcCostHistReportBySvcType2RowChangeEventHandler GetToolSvcCostHistReportBySvcType2RowChanged;
            
            public event GetToolSvcCostHistReportBySvcType2RowChangeEventHandler GetToolSvcCostHistReportBySvcType2RowDeleting;
            
            public event GetToolSvcCostHistReportBySvcType2RowChangeEventHandler GetToolSvcCostHistReportBySvcType2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetToolSvcCostHistReportBySvcType2Row(GetToolSvcCostHistReportBySvcType2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetToolSvcCostHistReportBySvcType2Row AddGetToolSvcCostHistReportBySvcType2Row(string tool_id, decimal labor_cost, decimal parts_cost, decimal total_cost, System.DateTime service_dt, string mechanic, string too_serv_descr, string tools_type_descr, string tools_descr_descr, System.DateTime fromDt, System.DateTime toDt, string registered_by, string managed_by, string div) {
                GetToolSvcCostHistReportBySvcType2Row rowGetToolSvcCostHistReportBySvcType2Row = ((GetToolSvcCostHistReportBySvcType2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        tool_id,
                        labor_cost,
                        parts_cost,
                        total_cost,
                        service_dt,
                        mechanic,
                        too_serv_descr,
                        tools_type_descr,
                        tools_descr_descr,
                        fromDt,
                        toDt,
                        registered_by,
                        managed_by,
                        div};
                rowGetToolSvcCostHistReportBySvcType2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetToolSvcCostHistReportBySvcType2Row);
                return rowGetToolSvcCostHistReportBySvcType2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetToolSvcCostHistReportBySvcType2DataTable cln = ((GetToolSvcCostHistReportBySvcType2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetToolSvcCostHistReportBySvcType2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntool_id = base.Columns["tool_id"];
                this.columnlabor_cost = base.Columns["labor_cost"];
                this.columnparts_cost = base.Columns["parts_cost"];
                this.columntotal_cost = base.Columns["total_cost"];
                this.columnservice_dt = base.Columns["service_dt"];
                this.columnmechanic = base.Columns["mechanic"];
                this.columntoo_serv_descr = base.Columns["too_serv_descr"];
                this.columntools_type_descr = base.Columns["tools_type_descr"];
                this.columntools_descr_descr = base.Columns["tools_descr_descr"];
                this.columnfromDt = base.Columns["fromDt"];
                this.columntoDt = base.Columns["toDt"];
                this.columnregistered_by = base.Columns["registered_by"];
                this.columnmanaged_by = base.Columns["managed_by"];
                this.columndiv = base.Columns["div"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntool_id = new global::System.Data.DataColumn("tool_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntool_id);
                this.columnlabor_cost = new global::System.Data.DataColumn("labor_cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabor_cost);
                this.columnparts_cost = new global::System.Data.DataColumn("parts_cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparts_cost);
                this.columntotal_cost = new global::System.Data.DataColumn("total_cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal_cost);
                this.columnservice_dt = new global::System.Data.DataColumn("service_dt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_dt);
                this.columnmechanic = new global::System.Data.DataColumn("mechanic", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmechanic);
                this.columntoo_serv_descr = new global::System.Data.DataColumn("too_serv_descr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntoo_serv_descr);
                this.columntools_type_descr = new global::System.Data.DataColumn("tools_type_descr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntools_type_descr);
                this.columntools_descr_descr = new global::System.Data.DataColumn("tools_descr_descr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntools_descr_descr);
                this.columnfromDt = new global::System.Data.DataColumn("fromDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfromDt);
                this.columntoDt = new global::System.Data.DataColumn("toDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntoDt);
                this.columnregistered_by = new global::System.Data.DataColumn("registered_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnregistered_by);
                this.columnmanaged_by = new global::System.Data.DataColumn("managed_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmanaged_by);
                this.columndiv = new global::System.Data.DataColumn("div", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiv);
                this.columntool_id.MaxLength = 10;
                this.columntotal_cost.ReadOnly = true;
                this.columnmechanic.MaxLength = 25;
                this.columntoo_serv_descr.MaxLength = 25;
                this.columntools_type_descr.MaxLength = 25;
                this.columntools_descr_descr.MaxLength = 50;
                this.columnfromDt.ReadOnly = true;
                this.columntoDt.ReadOnly = true;
                this.columnregistered_by.MaxLength = 50;
                this.columnmanaged_by.MaxLength = 50;
                this.columndiv.ReadOnly = true;
                this.columndiv.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetToolSvcCostHistReportBySvcType2Row NewGetToolSvcCostHistReportBySvcType2Row() {
                return ((GetToolSvcCostHistReportBySvcType2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetToolSvcCostHistReportBySvcType2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetToolSvcCostHistReportBySvcType2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetToolSvcCostHistReportBySvcType2RowChanged != null)) {
                    this.GetToolSvcCostHistReportBySvcType2RowChanged(this, new GetToolSvcCostHistReportBySvcType2RowChangeEvent(((GetToolSvcCostHistReportBySvcType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetToolSvcCostHistReportBySvcType2RowChanging != null)) {
                    this.GetToolSvcCostHistReportBySvcType2RowChanging(this, new GetToolSvcCostHistReportBySvcType2RowChangeEvent(((GetToolSvcCostHistReportBySvcType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetToolSvcCostHistReportBySvcType2RowDeleted != null)) {
                    this.GetToolSvcCostHistReportBySvcType2RowDeleted(this, new GetToolSvcCostHistReportBySvcType2RowChangeEvent(((GetToolSvcCostHistReportBySvcType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetToolSvcCostHistReportBySvcType2RowDeleting != null)) {
                    this.GetToolSvcCostHistReportBySvcType2RowDeleting(this, new GetToolSvcCostHistReportBySvcType2RowChangeEvent(((GetToolSvcCostHistReportBySvcType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetToolSvcCostHistReportBySvcType2Row(GetToolSvcCostHistReportBySvcType2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSvcCostHistReportBySvcTypeDS ds = new ToolSvcCostHistReportBySvcTypeDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetToolSvcCostHistReportBySvcType2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetToolSvcCostHistReportBySvcType2Row : global::System.Data.DataRow {
            
            private GetToolSvcCostHistReportBySvcType2DataTable tableGetToolSvcCostHistReportBySvcType2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetToolSvcCostHistReportBySvcType2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetToolSvcCostHistReportBySvcType2 = ((GetToolSvcCostHistReportBySvcType2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tool_id {
                get {
                    try {
                        return ((string)(this[this.tableGetToolSvcCostHistReportBySvcType2.tool_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tool_id\' in table \'GetToolSvcCostHistReportBySvcType2\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.tool_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal labor_cost {
                get {
                    try {
                        return ((decimal)(this[this.tableGetToolSvcCostHistReportBySvcType2.labor_costColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'labor_cost\' in table \'GetToolSvcCostHistReportBySvcType2\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.labor_costColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal parts_cost {
                get {
                    try {
                        return ((decimal)(this[this.tableGetToolSvcCostHistReportBySvcType2.parts_costColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parts_cost\' in table \'GetToolSvcCostHistReportBySvcType2\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.parts_costColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal total_cost {
                get {
                    try {
                        return ((decimal)(this[this.tableGetToolSvcCostHistReportBySvcType2.total_costColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total_cost\' in table \'GetToolSvcCostHistReportBySvcType2\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.total_costColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime service_dt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetToolSvcCostHistReportBySvcType2.service_dtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'service_dt\' in table \'GetToolSvcCostHistReportBySvcType2\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.service_dtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mechanic {
                get {
                    try {
                        return ((string)(this[this.tableGetToolSvcCostHistReportBySvcType2.mechanicColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mechanic\' in table \'GetToolSvcCostHistReportBySvcType2\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.mechanicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string too_serv_descr {
                get {
                    try {
                        return ((string)(this[this.tableGetToolSvcCostHistReportBySvcType2.too_serv_descrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'too_serv_descr\' in table \'GetToolSvcCostHistReportBySvcType" +
                                "2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.too_serv_descrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tools_type_descr {
                get {
                    try {
                        return ((string)(this[this.tableGetToolSvcCostHistReportBySvcType2.tools_type_descrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tools_type_descr\' in table \'GetToolSvcCostHistReportBySvcTy" +
                                "pe2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.tools_type_descrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tools_descr_descr {
                get {
                    try {
                        return ((string)(this[this.tableGetToolSvcCostHistReportBySvcType2.tools_descr_descrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tools_descr_descr\' in table \'GetToolSvcCostHistReportBySvcT" +
                                "ype2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.tools_descr_descrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime fromDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetToolSvcCostHistReportBySvcType2.fromDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fromDt\' in table \'GetToolSvcCostHistReportBySvcType2\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.fromDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime toDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetToolSvcCostHistReportBySvcType2.toDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'toDt\' in table \'GetToolSvcCostHistReportBySvcType2\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.toDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string registered_by {
                get {
                    try {
                        return ((string)(this[this.tableGetToolSvcCostHistReportBySvcType2.registered_byColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'registered_by\' in table \'GetToolSvcCostHistReportBySvcType2" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.registered_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string managed_by {
                get {
                    try {
                        return ((string)(this[this.tableGetToolSvcCostHistReportBySvcType2.managed_byColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'managed_by\' in table \'GetToolSvcCostHistReportBySvcType2\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.managed_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string div {
                get {
                    try {
                        return ((string)(this[this.tableGetToolSvcCostHistReportBySvcType2.divColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'div\' in table \'GetToolSvcCostHistReportBySvcType2\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetToolSvcCostHistReportBySvcType2.divColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istool_idNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.tool_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settool_idNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.tool_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islabor_costNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.labor_costColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlabor_costNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.labor_costColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparts_costNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.parts_costColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparts_costNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.parts_costColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istotal_costNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.total_costColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settotal_costNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.total_costColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isservice_dtNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.service_dtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setservice_dtNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.service_dtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmechanicNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.mechanicColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmechanicNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.mechanicColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istoo_serv_descrNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.too_serv_descrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settoo_serv_descrNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.too_serv_descrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istools_type_descrNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.tools_type_descrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settools_type_descrNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.tools_type_descrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istools_descr_descrNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.tools_descr_descrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settools_descr_descrNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.tools_descr_descrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfromDtNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.fromDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfromDtNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.fromDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstoDtNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.toDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettoDtNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.toDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isregistered_byNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.registered_byColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setregistered_byNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.registered_byColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismanaged_byNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.managed_byColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmanaged_byNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.managed_byColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdivNull() {
                return this.IsNull(this.tableGetToolSvcCostHistReportBySvcType2.divColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdivNull() {
                this[this.tableGetToolSvcCostHistReportBySvcType2.divColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetToolSvcCostHistReportBySvcType2RowChangeEvent : global::System.EventArgs {
            
            private GetToolSvcCostHistReportBySvcType2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetToolSvcCostHistReportBySvcType2RowChangeEvent(GetToolSvcCostHistReportBySvcType2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetToolSvcCostHistReportBySvcType2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ULS_Site.Reports.ToolSvcCostHistReportBySvcTypeDSTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetToolSvcCostHistReportBySvcType2TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetToolSvcCostHistReportBySvcType2TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetToolSvcCostHistReportBySvcType2";
            tableMapping.ColumnMappings.Add("tool_id", "tool_id");
            tableMapping.ColumnMappings.Add("labor_cost", "labor_cost");
            tableMapping.ColumnMappings.Add("parts_cost", "parts_cost");
            tableMapping.ColumnMappings.Add("total_cost", "total_cost");
            tableMapping.ColumnMappings.Add("service_dt", "service_dt");
            tableMapping.ColumnMappings.Add("mechanic", "mechanic");
            tableMapping.ColumnMappings.Add("too_serv_descr", "too_serv_descr");
            tableMapping.ColumnMappings.Add("tools_type_descr", "tools_type_descr");
            tableMapping.ColumnMappings.Add("tools_descr_descr", "tools_descr_descr");
            tableMapping.ColumnMappings.Add("fromDt", "fromDt");
            tableMapping.ColumnMappings.Add("toDt", "toDt");
            tableMapping.ColumnMappings.Add("registered_by", "registered_by");
            tableMapping.ColumnMappings.Add("managed_by", "managed_by");
            tableMapping.ColumnMappings.Add("div", "div");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ULS_db1ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetToolSvcCostHistReportBySvcType2";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fromDt", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@toDt", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serv_perf_id", global::System.Data.SqlDbType.SmallInt, 2, global::System.Data.ParameterDirection.Input, 5, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@div", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ToolSvcCostHistReportBySvcTypeDS.GetToolSvcCostHistReportBySvcType2DataTable dataTable, global::System.Nullable<global::System.DateTime> fromDt, global::System.Nullable<global::System.DateTime> toDt, global::System.Nullable<short> serv_perf_id, string div) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((fromDt.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(fromDt.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((toDt.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(toDt.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((serv_perf_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((short)(serv_perf_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((div == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(div));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ToolSvcCostHistReportBySvcTypeDS.GetToolSvcCostHistReportBySvcType2DataTable GetData(global::System.Nullable<global::System.DateTime> fromDt, global::System.Nullable<global::System.DateTime> toDt, global::System.Nullable<short> serv_perf_id, string div) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((fromDt.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(fromDt.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((toDt.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(toDt.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((serv_perf_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((short)(serv_perf_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((div == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(div));
            }
            ToolSvcCostHistReportBySvcTypeDS.GetToolSvcCostHistReportBySvcType2DataTable dataTable = new ToolSvcCostHistReportBySvcTypeDS.GetToolSvcCostHistReportBySvcType2DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(ToolSvcCostHistReportBySvcTypeDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(ToolSvcCostHistReportBySvcTypeDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(ToolSvcCostHistReportBySvcTypeDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(ToolSvcCostHistReportBySvcTypeDS dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591